<?xml version="1.0" encoding="UTF-8" ?>
<results>
    <error file="../iniparser/src/dictionary.c" line="363" id="variableScope" severity="style" msg="The scope of the variable &apos;val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="../iniparser/src/iniparser.c" line="210" id="variableScope" severity="style" msg="The scope of the variable &apos;secname&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="../iniparser/src/iniparser.c" line="640" id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="../iniparser/src/iniparser.c" line="52" id="arrayIndexThenCheck" severity="style" msg="Defensive programming: The variable &apos;i&apos; is used as an array index before it is check that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." />
    <error file="../iniparser/src/iniparser.c" line="577" id="invalidscanf" severity="style" msg='scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:    %s =&gt; %20sSample program that can crash:#include &lt;stdio.h&gt;int main(){    char c[5];    scanf(&quot;%s&quot;, c);    return 0;}To make it crash, type in more than 5 characters.' />
    <error file="../iniparser/src/iniparser.c" line="581" id="invalidscanf" severity="style" msg='scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:    %s =&gt; %20sSample program that can crash:#include &lt;stdio.h&gt;int main(){    char c[5];    scanf(&quot;%s&quot;, c);    return 0;}To make it crash, type in more than 5 characters.' />
    <error file="../iniparser/src/iniparser.c" line="582" id="invalidscanf" severity="style" msg='scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:    %s =&gt; %20sSample program that can crash:#include &lt;stdio.h&gt;int main(){    char c[5];    scanf(&quot;%s&quot;, c);    return 0;}To make it crash, type in more than 5 characters.' />
    <error file="../iniparser/src/iniparser.c" line="583" id="invalidscanf" severity="style" msg='scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:    %s =&gt; %20sSample program that can crash:#include &lt;stdio.h&gt;int main(){    char c[5];    scanf(&quot;%s&quot;, c);    return 0;}To make it crash, type in more than 5 characters.' />
    <error file="../iniparser/src/iniparser.c" line="596" id="invalidscanf" severity="style" msg='scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:    %s =&gt; %20sSample program that can crash:#include &lt;stdio.h&gt;int main(){    char c[5];    scanf(&quot;%s&quot;, c);    return 0;}To make it crash, type in more than 5 characters.' />
    <error file="../iniparser/src/iniparser.c" line="597" id="invalidscanf" severity="style" msg='scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:    %s =&gt; %20sSample program that can crash:#include &lt;stdio.h&gt;int main(){    char c[5];    scanf(&quot;%s&quot;, c);    return 0;}To make it crash, type in more than 5 characters.' />
    <error file="include/AbstractWorld.h" line="60" id="unusedStructMember" severity="style" msg="struct or union member &apos;SThreadParam::thread_id&apos; is never used." />
    <error file="include/C2DVector.h" line="34" id="operatorEq" severity="style" msg="&apos;C2DVector::operator=&apos; should return &apos;C2DVector &amp;&apos;." />
    <error file="include/OrganismConfig.h" line="22" id="duplInheritedMember" severity="style" msg="The class &apos;CreatureConfig&apos; defines member variable with name &apos;_energy_consumption&apos; also defined in its parent class &apos;OrganismConfig&apos;." />
    <error file="include/OrganismConfig.h" line="38" id="passedByValue" severity="style" msg="Parameter &apos;energy&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="src/AboutWindow.cpp" line="68" id="unreadVariable" severity="style" msg="Variable &apos;button_ok&apos; is assigned a value that is never used." />
    <error file="src/AbstractWorld.cpp" line="178" id="cstyleCast" severity="style" msg="C-style pointer casting" />
    <error file="src/AbstractWorld.cpp" line="700" id="variableScope" severity="style" msg="The scope of the variable &apos;x&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="src/AbstractWorld.cpp" line="701" id="variableScope" severity="style" msg="The scope of the variable &apos;y&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="src/AbstractWorld.cpp" line="730" id="variableScope" severity="style" msg="The scope of the variable &apos;x&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="src/AbstractWorld.cpp" line="731" id="variableScope" severity="style" msg="The scope of the variable &apos;y&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="include/Cell.h" line="40" id="noCopyConstructor" severity="style" msg="&apos;class Cell&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." />
    <error file="src/Field.cpp" line="532" id="stlSize" severity="style" msg="Checking for &apos;_preys&apos; emptiness might be inefficient. Using _preys.empty() instead of _preys.size() can be faster. _preys.size() can take linear time but _preys.empty() is guaranteed to take constant time." />
    <error file="src/Field.cpp" line="533" id="stlSize" severity="style" msg="Checking for &apos;_predators&apos; emptiness might be inefficient. Using _predators.empty() instead of _predators.size() can be faster. _predators.size() can take linear time but _predators.empty() is guaranteed to take constant time." />
    <error file="src/Field.cpp" line="542" id="stlSize" severity="style" msg="Checking for &apos;_arrived_preys&apos; emptiness might be inefficient. Using _arrived_preys.empty() instead of _arrived_preys.size() can be faster. _arrived_preys.size() can take linear time but _arrived_preys.empty() is guaranteed to take constant time." />
    <error file="src/Field.cpp" line="543" id="stlSize" severity="style" msg="Checking for &apos;_arrived_predators&apos; emptiness might be inefficient. Using _arrived_predators.empty() instead of _arrived_predators.size() can be faster. _arrived_predators.size() can take linear time but _arrived_predators.empty() is guaranteed to take constant time." />
    <error file="src/Field.cpp" line="190" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="src/Field.cpp" line="207" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="src/Field.cpp" line="241" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="src/Field.cpp" line="247" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="src/Field.cpp" line="266" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="src/Field.cpp" line="272" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="src/Field.cpp" line="292" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="src/Field.cpp" line="310" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="src/Field.cpp" line="332" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="src/Field.cpp" line="349" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="src/Field.cpp" line="389" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="src/Field.cpp" line="440" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="include/RuntimeError.h" line="11" id="passedByValue" severity="style" msg="Parameter &apos;err_msg&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="src/FilePtr.cpp" line="9" id="passedByValue" severity="style" msg="Parameter &apos;filename&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="src/FilePtr.cpp" line="9" id="passedByValue" severity="style" msg="Parameter &apos;access&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="src/FilePtr.cpp" line="16" id="constStatement" severity="style" msg="Redundant code: Found a statement that begins with string constant." />
    <error file="src/FilePtr.cpp" line="25" id="constStatement" severity="style" msg="Redundant code: Found a statement that begins with string constant." />
    <error file="src/FilePtr.cpp" line="31" id="constStatement" severity="style" msg="Redundant code: Found a statement that begins with string constant." />
    <error file="src/Graph.cpp" line="270" id="unsignedPositive" severity="style" msg="Unsigned variable &apos;i&apos; can&apos;t be negative so it is unnecessary to test it." />
    <error file="src/Graph.cpp" line="20" id="uninitMemberVar" severity="style" msg="Member variable &apos;Graph::_is_enabled&apos; is not initialized in the constructor." />
    <error file="src/Graph.cpp" line="210" id="unsignedPositive" severity="style" msg="Unsigned variable &apos;start&apos; can&apos;t be negative so it is unnecessary to test it." />
    <error file="src/IniParser.cpp" line="30" id="constStatement" severity="style" msg="Redundant code: Found a statement that begins with string constant." />
    <error file="src/IniParser.cpp" line="40" id="constStatement" severity="style" msg="Redundant code: Found a statement that begins with string constant." />
    <error file="src/IniParser.cpp" line="55" id="constStatement" severity="style" msg="Redundant code: Found a statement that begins with string constant." />
    <error file="src/OrganismConfig.cpp" line="15" id="uninitMemberVar" severity="style" msg="Member variable &apos;OrganismConfig::_energy_consumption&apos; is not initialized in the constructor." />
    <error file="src/OrganismConfig.cpp" line="112" id="passedByValue" severity="style" msg="Parameter &apos;energy&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="src/RuntimeError.cpp" line="4" id="passedByValue" severity="style" msg="Parameter &apos;msg&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++." />
    <error file="src/VisualWorld.cpp" line="226" id="unreadVariable" severity="style" msg="Variable &apos;size_x&apos; is assigned a value that is never used." />
    <error file="src/VisualWorld.cpp" line="227" id="unreadVariable" severity="style" msg="Variable &apos;_size_y&apos; is assigned a value that is never used." />
    <error file="src_ut/AWorldUnitTest.cpp" line="132" id="unreadVariable" severity="style" msg="Variable &apos;prey_config&apos; is assigned a value that is never used." />
    <error file="src_ut/AWorldUnitTest.cpp" line="5" id="uninitMemberVar" severity="style" msg="Member variable &apos;AWorldUnitTest::_plant&apos; is not initialized in the constructor." />
    <error file="src_ut/AWorldUnitTest.cpp" line="5" id="uninitMemberVar" severity="style" msg="Member variable &apos;AWorldUnitTest::_prey&apos; is not initialized in the constructor." />
    <error file="src_ut/AWorldUnitTest.cpp" line="5" id="uninitMemberVar" severity="style" msg="Member variable &apos;AWorldUnitTest::_pred&apos; is not initialized in the constructor." />
    <error file="src_ut/AWorldUnitTest.cpp" line="5" id="uninitMemberVar" severity="style" msg="Member variable &apos;AWorldUnitTest::_aw&apos; is not initialized in the constructor." />
    <error file="src_ut/AWorldUnitTest.cpp" line="57" id="publicAllocationError" severity="style" msg="Possible leak in public function. The pointer &apos;_aw&apos; is not deallocated before it is allocated." />
    <error file="src_ut/AWorldUnitTest.cpp" line="103" id="publicAllocationError" severity="style" msg="Possible leak in public function. The pointer &apos;_aw&apos; is not deallocated before it is allocated." />
    <error file="src_ut/CellUnitTest.cpp" line="18" id="publicAllocationError" severity="style" msg="Possible leak in public function. The pointer &apos;_cell&apos; is not deallocated before it is allocated." />
    <error file="src_ut/FieldUnitTest.cpp" line="28" id="unreadVariable" severity="style" msg="Variable &apos;max_val&apos; is assigned a value that is never used." />
    <error file="src_ut/FieldUnitTest.cpp" line="141" id="unreadVariable" severity="style" msg="Variable &apos;prey_config&apos; is assigned a value that is never used." />
    <error file="src_ut/FieldUnitTest.cpp" line="273" id="unreadVariable" severity="style" msg="Variable &apos;prey1_config&apos; is assigned a value that is never used." />
    <error file="src_ut/FieldUnitTest.cpp" line="275" id="unreadVariable" severity="style" msg="Variable &apos;prey2_config&apos; is assigned a value that is never used." />
    <error file="src_ut/FieldUnitTest.cpp" line="277" id="unreadVariable" severity="style" msg="Variable &apos;predator1_config&apos; is assigned a value that is never used." />
    <error file="src_ut/FieldUnitTest.cpp" line="279" id="unreadVariable" severity="style" msg="Variable &apos;predator2_config&apos; is assigned a value that is never used." />
    <error file="src_ut/FieldUnitTest.cpp" line="399" id="unreadVariable" severity="style" msg="Variable &apos;pred1_config&apos; is assigned a value that is never used." />
    <error file="src_ut/FieldUnitTest.cpp" line="401" id="unreadVariable" severity="style" msg="Variable &apos;pred2_config&apos; is assigned a value that is never used." />
    <error file="src_ut/FieldUnitTest.cpp" line="404" id="unreadVariable" severity="style" msg="Variable &apos;pred4_config&apos; is assigned a value that is never used." />
    <error file="src_ut/FieldUnitTest.cpp" line="406" id="unreadVariable" severity="style" msg="Variable &apos;pred5_config&apos; is assigned a value that is never used." />
    <error file="src_ut/MainWindowUnitTest.cpp" line="37" id="unreadVariable" severity="style" msg="Variable &apos;value&apos; is assigned a value that is never used." />
    <error file="src_ut/MainWindowUnitTest.cpp" line="45" id="unreadVariable" severity="style" msg="Variable &apos;value&apos; is assigned a value that is never used." />
    <error file="src_ut/PlantConfigUnitTest.cpp" line="5" id="uninitMemberVar" severity="style" msg="Member variable &apos;PlantConfigUnitTest::plant_config&apos; is not initialized in the constructor." />
    <error file="src_ut/PreyConfigUnitTest.cpp" line="5" id="uninitMemberVar" severity="style" msg="Member variable &apos;PreyConfigUnitTest::prey_config&apos; is not initialized in the constructor." />
    <error file="../iniparser/src/dictionary.c" line="337" id="unusedFunction" severity="style" msg="The function &apos;dictionary_dump&apos; is never used." />
    <error file="src/IniParser.cpp" line="69" id="unusedFunction" severity="style" msg="The function &apos;dump&apos; is never used." />
    <error file="src/CreatureConfig.cpp" line="297" id="unusedFunction" severity="style" msg="The function &apos;get_config&apos; is never used." />
    <error file="src/Cell.cpp" line="112" id="unusedFunction" severity="style" msg="The function &apos;get_corners&apos; is never used." />
    <error file="src/Barrier.cpp" line="46" id="unusedFunction" severity="style" msg="The function &apos;get_counter&apos; is never used." />
    <error file="src/AbstractWorld.cpp" line="589" id="unusedFunction" severity="style" msg="The function &apos;get_number_of_threads&apos; is never used." />
    <error file="src/Barrier.cpp" line="51" id="unusedFunction" severity="style" msg="The function &apos;get_threshold&apos; is never used." />
    <error file="../iniparser/src/iniparser.c" line="430" id="unusedFunction" severity="style" msg="The function &apos;iniparser_getdouble&apos; is never used." />
    <error file="../iniparser/src/iniparser.c" line="540" id="unusedFunction" severity="style" msg="The function &apos;iniparser_unset&apos; is never used." />
    <error file="src/Graph.cpp" line="431" id="unusedFunction" severity="style" msg="The function &apos;is_enabled&apos; is never used." />
    <error file="src/Cell.cpp" line="204" id="unusedFunction" severity="style" msg="The function &apos;new_cell&apos; is never used." />
    <error file="src/Graph.cpp" line="123" id="unusedFunction" severity="style" msg="The function &apos;on_draw&apos; is never used." />
    <error file="src_ut/AWorldUnitTest.cpp" line="16" id="unusedFunction" severity="style" msg="The function &apos;setUp&apos; is never used." />
    <error file="src_ut/AWorldUnitTest.cpp" line="46" id="unusedFunction" severity="style" msg="The function &apos;tearDown&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="37" id="unusedFunction" severity="style" msg="The function &apos;testInit_d&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="30" id="unusedFunction" severity="style" msg="The function &apos;testInit_ui&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="50" id="unusedFunction" severity="style" msg="The function &apos;test_addition_01_1_ui&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="92" id="unusedFunction" severity="style" msg="The function &apos;test_addition_01_2_ui&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="132" id="unusedFunction" severity="style" msg="The function &apos;test_addition_01_d&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="59" id="unusedFunction" severity="style" msg="The function &apos;test_addition_02_1_ui&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="101" id="unusedFunction" severity="style" msg="The function &apos;test_addition_02_2_ui&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="141" id="unusedFunction" severity="style" msg="The function &apos;test_addition_02_d&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="68" id="unusedFunction" severity="style" msg="The function &apos;test_addition_03_1_ui&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="110" id="unusedFunction" severity="style" msg="The function &apos;test_addition_03_2_ui&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="149" id="unusedFunction" severity="style" msg="The function &apos;test_addition_03_d&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="77" id="unusedFunction" severity="style" msg="The function &apos;test_addition_04_1_ui&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="119" id="unusedFunction" severity="style" msg="The function &apos;test_addition_04_2_ui&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="157" id="unusedFunction" severity="style" msg="The function &apos;test_addition_04_d&apos; is never used." />
    <error file="src_ut/FieldUnitTest.cpp" line="95" id="unusedFunction" severity="style" msg="The function &apos;test_choose_direction_preds&apos; is never used." />
    <error file="src_ut/FieldUnitTest.cpp" line="137" id="unusedFunction" severity="style" msg="The function &apos;test_choose_direction_preys&apos; is never used." />
    <error file="src_ut/VWorldUnitTest.cpp" line="75" id="unusedFunction" severity="style" msg="The function &apos;test_compute_visual_area&apos; is never used." />
    <error file="src_ut/FieldUnitTest.cpp" line="78" id="unusedFunction" severity="style" msg="The function &apos;test_count_organisms&apos; is never used." />
    <error file="src_ut/VWorldUnitTest.cpp" line="37" id="unusedFunction" severity="style" msg="The function &apos;test_distance&apos; is never used." />
    <error file="src_ut/PreyUnitTest.cpp" line="101" id="unusedFunction" severity="style" msg="The function &apos;test_eat&apos; is never used." />
    <error file="src_ut/MainWindowUnitTest.cpp" line="51" id="unusedFunction" severity="style" msg="The function &apos;test_entry_to_d&apos; is never used." />
    <error file="src_ut/MainWindowUnitTest.cpp" line="43" id="unusedFunction" severity="style" msg="The function &apos;test_entry_to_l&apos; is never used." />
    <error file="src_ut/MainWindowUnitTest.cpp" line="35" id="unusedFunction" severity="style" msg="The function &apos;test_entry_to_ui&apos; is never used." />
    <error file="src_ut/FieldUnitTest.cpp" line="50" id="unusedFunction" severity="style" msg="The function &apos;test_get_set_organisms&apos; is never used." />
    <error file="src_ut/AWorldUnitTest.cpp" line="57" id="unusedFunction" severity="style" msg="The function &apos;test_init&apos; is never used." />
    <error file="src_ut/PreyUnitTest.cpp" line="31" id="unusedFunction" severity="style" msg="The function &apos;test_is_death_aged&apos; is never used." />
    <error file="src_ut/PreyUnitTest.cpp" line="69" id="unusedFunction" severity="style" msg="The function &apos;test_is_death_hunger&apos; is never used." />
    <error file="src_ut/PreyUnitTest.cpp" line="87" id="unusedFunction" severity="style" msg="The function &apos;test_is_death_killed&apos; is never used." />
    <error file="src_ut/PreyUnitTest.cpp" line="49" id="unusedFunction" severity="style" msg="The function &apos;test_is_death_underfed&apos; is never used." />
    <error file="src_ut/PreyUnitTest.cpp" line="121" id="unusedFunction" severity="style" msg="The function &apos;test_is_hungry&apos; is never used." />
    <error file="src_ut/PreyConfigUnitTest.cpp" line="57" id="unusedFunction" severity="style" msg="The function &apos;test_limits_age&apos; is never used." />
    <error file="src_ut/PlantConfigUnitTest.cpp" line="49" id="unusedFunction" severity="style" msg="The function &apos;test_limits_energy&apos; is never used." />
    <error file="src_ut/PreyConfigUnitTest.cpp" line="117" id="unusedFunction" severity="style" msg="The function &apos;test_limits_satiation&apos; is never used." />
    <error file="src_ut/FieldUnitTest.cpp" line="186" id="unusedFunction" severity="style" msg="The function &apos;test_move&apos; is never used." />
    <error file="src_ut/VWorldUnitTest.cpp" line="52" id="unusedFunction" severity="style" msg="The function &apos;test_point_to_pos&apos; is never used." />
    <error file="src_ut/FieldUnitTest.cpp" line="270" id="unusedFunction" severity="style" msg="The function &apos;test_preds_eat_preys&apos; is never used." />
    <error file="src_ut/FieldUnitTest.cpp" line="456" id="unusedFunction" severity="style" msg="The function &apos;test_preys_death&apos; is never used." />
    <error file="src_ut/FieldUnitTest.cpp" line="229" id="unusedFunction" severity="style" msg="The function &apos;test_preys_eat_plants&apos; is never used." />
    <error file="src_ut/AWorldUnitTest.cpp" line="130" id="unusedFunction" severity="style" msg="The function &apos;test_preys_eating&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="321" id="unusedFunction" severity="style" msg="The function &apos;test_quotient_01_ui&apos; is never used." />
    <error file="src_ut/PreyConfigUnitTest.cpp" line="137" id="unusedFunction" severity="style" msg="The function &apos;test_randomize&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="288" id="unusedFunction" severity="style" msg="The function &apos;test_randomize_01_ui&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="298" id="unusedFunction" severity="style" msg="The function &apos;test_randomize_02_ui&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="307" id="unusedFunction" severity="style" msg="The function &apos;test_randomize_03_ui&apos; is never used." />
    <error file="src_ut/CellUnitTest.cpp" line="31" id="unusedFunction" severity="style" msg="The function &apos;test_recalc_cell_center&apos; is never used." />
    <error file="src_ut/PreyConfigUnitTest.cpp" line="66" id="unusedFunction" severity="style" msg="The function &apos;test_scale_age&apos; is never used." />
    <error file="src_ut/PreyUnitTest.cpp" line="163" id="unusedFunction" severity="style" msg="The function &apos;test_scale_config&apos; is never used." />
    <error file="src_ut/PlantConfigUnitTest.cpp" line="59" id="unusedFunction" severity="style" msg="The function &apos;test_scale_energy&apos; is never used." />
    <error file="src_ut/PreyConfigUnitTest.cpp" line="126" id="unusedFunction" severity="style" msg="The function &apos;test_scale_satiation&apos; is never used." />
    <error file="src_ut/AWorldUnitTest.cpp" line="103" id="unusedFunction" severity="style" msg="The function &apos;test_set_config&apos; is never used." />
    <error file="src_ut/OrganismConfigUnitTest.cpp" line="17" id="unusedFunction" severity="style" msg="The function &apos;test_set_get&apos; is never used." />
    <error file="src_ut/PlantConfigUnitTest.cpp" line="69" id="unusedFunction" severity="style" msg="The function &apos;test_set_get_growth_rate&apos; is never used." />
    <error file="src_ut/PreyConfigUnitTest.cpp" line="48" id="unusedFunction" severity="style" msg="The function &apos;test_set_value_age&apos; is never used." />
    <error file="src_ut/PlantConfigUnitTest.cpp" line="40" id="unusedFunction" severity="style" msg="The function &apos;test_set_value_energy&apos; is never used." />
    <error file="src_ut/PreyConfigUnitTest.cpp" line="108" id="unusedFunction" severity="style" msg="The function &apos;test_set_value_satiation&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="174" id="unusedFunction" severity="style" msg="The function &apos;test_subtraction_01_1_ui&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="211" id="unusedFunction" severity="style" msg="The function &apos;test_subtraction_01_2_ui&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="250" id="unusedFunction" severity="style" msg="The function &apos;test_subtraction_01_d&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="182" id="unusedFunction" severity="style" msg="The function &apos;test_subtraction_02_1_ui&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="219" id="unusedFunction" severity="style" msg="The function &apos;test_subtraction_02_2_ui&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="258" id="unusedFunction" severity="style" msg="The function &apos;test_subtraction_02_d&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="190" id="unusedFunction" severity="style" msg="The function &apos;test_subtraction_03_1_ui&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="227" id="unusedFunction" severity="style" msg="The function &apos;test_subtraction_03_2_ui&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="266" id="unusedFunction" severity="style" msg="The function &apos;test_subtraction_03_d&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="198" id="unusedFunction" severity="style" msg="The function &apos;test_subtraction_04_1_ui&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="235" id="unusedFunction" severity="style" msg="The function &apos;test_subtraction_04_2_ui&apos; is never used." />
    <error file="src_ut/BoundedUnitTest.cpp" line="274" id="unusedFunction" severity="style" msg="The function &apos;test_subtraction_04_d&apos; is never used." />
    <error file="src_ut/FieldUnitTest.cpp" line="311" id="unusedFunction" severity="style" msg="The function &apos;test_update_plant&apos; is never used." />
    <error file="src_ut/FieldUnitTest.cpp" line="396" id="unusedFunction" severity="style" msg="The function &apos;test_update_predators&apos; is never used." />
    <error file="src_ut/FieldUnitTest.cpp" line="340" id="unusedFunction" severity="style" msg="The function &apos;test_update_preys&apos; is never used." />
    <error id="missingInclude" severity="style" msg="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config." />
</results>
